je dois lire tout le fichier jusqu a BUFFER_SIZE bytes
en // j'enregistre le fichier dans line jusqu'a ce que je tombe sur un \n
en // j'arrete de remplir line
en // je remplis un buffer tmp avec le reste de mon fichier
je retourne 1 si le fichier n'est pas fini
- tmp != EOF
je retourne 0 si le fichier est fini
- tmp == EOF

je peux rappeler la fonction si retour != 0
je redemarre dans mon fichier apres le \n
- dans le buffer ?
je remplis line jusau'au prochain \n
je remplis un buffer avec le reste de mon fichier
je retourne 1 si le fichier n'est pas fini
je retourne 0 si le fichier est fini
...

entre 2 boucles, ce qui n'est pas initialise :
- tmp conserve son contenu
-

je lis mon fichier de buf_size octets
- si je trouve un \n : j'enregistre dans line ce qu'il y a avant et dans tmp le reste
- si je trouve pas de \n : je vais a nouveau lire de buf_size octets...
je rappelle ma fonction :
- si je trouve un \n dans tmp : j'enregistre dans line ce qu'il y a avant et et dans tmp le reste
- si je trouve pas de \n dams tmp : je vais a nouveau lire de buf_size octets... 
jusqu'a ce que je trouve un \n et je vais concatener ce que j'ai lu a tmp

TESTS :
- buf_size > taille fichier sans \n >> test1
- buf_size > taille fichier avec \n >> test2
- buf_size < taille fichier sans \n >> test3
- buf_size < taille fichier avec \n >> test4

---------------------------------
LISTES CHAINEES

- Appel de GNL
- Je regarde s'il existe un maillon qui contient mon fd comme comtent_size (je parcours ma chaine)
> si ca n'est pas le cas, je cree un nouveau maillon, je l'ajoute a la suite des autres, et j'enregistre comme contenu mon tmp
> si le fd est contenu dans un maillon, alors je continue de lire le fd en question et je renvoie la ligne

